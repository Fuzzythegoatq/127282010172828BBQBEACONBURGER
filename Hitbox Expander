-- Load Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Initial notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Universal Hitbox Expander",
    Text = "Made By Corygunzjr",
    Duration = 5
})

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "Universal Hitbox Expander",
    LoadingTitle = "Loading HBE...",
    LoadingSubtitle = "With Team/Player Selection",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldHBE",
        FileName = "HBEConfig"
    },
    Discord = { Enabled = false },
    KeySystem = false
})

-- Create tabs
local MainTab = Window:CreateTab("Hitbox Expander", 4483362458)
local FilterTab = Window:CreateTab("Filters", 4483362458)

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local Teams = game:GetService("Teams")

-- Configuration system
local config = {
    size = 5,
    transparency = 0.5,
    enabled = false
}

-- Filter system
local filters = {
    excludedPlayers = {},
    excludedTeams = {},
    forceIncludedPlayers = {},
    hideWhenSitting = false -- NEW
}

-- Player monitoring
local monitoredPlayers = {}

-- Get all current teams
local function getTeamList()
    local teamList = {}
    for _, team in ipairs(Teams:GetTeams()) do
        table.insert(teamList, team.Name)
    end
    return teamList
end

-- Get all players (excluding local player)
local function getPlayerList()
    local playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerList, player.Name)
        end
    end
    return playerList
end

-- Check if player should have hitbox
local function shouldShowHitbox(player)
    if filters.forceIncludedPlayers[player.Name] then
        return true
    end
    if filters.excludedPlayers[player.Name] then
        return false
    end
    if player.Team and filters.excludedTeams[player.Team.Name] then
        return false
    end
    if filters.hideWhenSitting then
        local char = player.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Sit then
                return false
            end
        end
    end
    return true
end

-- Reset head to normal
local function resetHead(player)
    if monitoredPlayers[player] then
        local char = player.Character
        if char and char:FindFirstChild("Head") then
            local head = char.Head
            head.Size = Vector3.new(2, 1, 1)
            head.Transparency = 0
            head.CanCollide = true
            head.Massless = false
        end
    end
end

-- Apply head hitbox
local function applyHitbox(player)
    if player == LocalPlayer then return end

    if not monitoredPlayers[player] then
        monitoredPlayers[player] = true

        player.CharacterAdded:Connect(function(char)
            char:WaitForChild("Head", 5)
            local humanoid = char:WaitForChild("Humanoid", 5)
            if humanoid then
                humanoid:GetPropertyChangedSignal("Sit"):Connect(function()
                    applyHitbox(player)
                end)
            end
            task.wait(0.2)
            applyHitbox(player)
        end)

        if player.Character then
            local humanoid = player.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:GetPropertyChangedSignal("Sit"):Connect(function()
                    applyHitbox(player)
                end)
            end
            task.delay(0.3, function()
                applyHitbox(player)
            end)
        end
    end

    local char = player.Character
    if not char then return end

    local head = char:FindFirstChild("Head")
    local humanoid = char:FindFirstChild("Humanoid")

    if not head or not humanoid or humanoid.Health <= 0 then
        resetHead(player)
        return
    end

    if not config.enabled or not shouldShowHitbox(player) then
        resetHead(player)
        return
    end

    head.Size = Vector3.new(config.size, config.size, config.size)
    head.Transparency = config.transparency
    head.CanCollide = false
    head.Massless = true
end

-- Update all hitboxes
local function updateAllHitboxes()
    for player, _ in pairs(monitoredPlayers) do
        applyHitbox(player)
    end
end

-- Main Tab UI Elements
MainTab:CreateToggle({
    Name = "Enable Hitbox Expander",
    CurrentValue = config.enabled,
    Flag = "HitboxToggle",
    Callback = function(Value)
        config.enabled = Value
        updateAllHitboxes()
    end,
})

MainTab:CreateSlider({
    Name = "Head Size",
    Range = {2, 200},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = config.size,
    Flag = "SizeSlider",
    Callback = function(Value)
        config.size = Value
        updateAllHitboxes()
    end,
})

MainTab:CreateSlider({
    Name = "Transparency",
    Range = {0, 1},
    Increment = 0.05,
    Suffix = "",
    CurrentValue = config.transparency,
    Flag = "TransparencySlider",
    Callback = function(Value)
        config.transparency = Value
        updateAllHitboxes()
    end,
})

-- Filter Tab UI Elements
local playerDropdown = FilterTab:CreateDropdown({
    Name = "Exclude Players",
    Options = getPlayerList(),
    CurrentOption = "",
    MultipleOptions = true,
    Flag = "PlayerFilterDropdown",
    Callback = function(Selected)
        filters.excludedPlayers = {}
        for _, playerName in ipairs(Selected) do
            filters.excludedPlayers[playerName] = true
        end
        updateAllHitboxes()
    end,
})

local teamDropdown = FilterTab:CreateDropdown({
    Name = "Exclude Teams",
    Options = getTeamList(),
    CurrentOption = "",
    MultipleOptions = true,
    Flag = "TeamFilterDropdown",
    Callback = function(Selected)
        filters.excludedTeams = {}
        for _, teamName in ipairs(Selected) do
            filters.excludedTeams[teamName] = true
        end
        updateAllHitboxes()
    end,
})

local forceIncludeDropdown = FilterTab:CreateDropdown({
    Name = "Force Include Players",
    Options = getPlayerList(),
    CurrentOption = "",
    MultipleOptions = true,
    Flag = "ForceIncludeDropdown",
    Callback = function(Selected)
        filters.forceIncludedPlayers = {}
        for _, playerName in ipairs(Selected) do
            filters.forceIncludedPlayers[playerName] = true
        end
        updateAllHitboxes()
    end,
})

FilterTab:CreateToggle({
    Name = "Hide Hitbox When Player is Sitting",
    CurrentValue = filters.hideWhenSitting,
    Flag = "HideSittingToggle",
    Callback = function(Value)
        filters.hideWhenSitting = Value
        updateAllHitboxes()
    end
})

-- Update dropdowns when players/teams change
Players.PlayerAdded:Connect(function()
    playerDropdown:Refresh(getPlayerList(), true)
    forceIncludeDropdown:Refresh(getPlayerList(), true)
end)

Players.PlayerRemoving:Connect(function()
    playerDropdown:Refresh(getPlayerList(), true)
    forceIncludeDropdown:Refresh(getPlayerList(), true)
end)

Teams.ChildAdded:Connect(function()
    teamDropdown:Refresh(getTeamList(), true)
end)

Teams.ChildRemoved:Connect(function()
    teamDropdown:Refresh(getTeamList(), true)
end)

-- Initialize monitoring for all players
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        applyHitbox(player)
    end
end

-- Monitor new players
Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        applyHitbox(player)
    end
end)

-- Clean up when players leave
Players.PlayerRemoving:Connect(function(player)
    if monitoredPlayers[player] then
        resetHead(player)
        monitoredPlayers[player] = nil
    end
end)

-- Real-time monitoring
RunService.Heartbeat:Connect(function()
    if config.enabled then
        for player, _ in pairs(monitoredPlayers) do
            applyHitbox(player)
        end
    end
end)

-- Ensure UI visibility
task.spawn(function()
    wait(1)
    if Rayfield then
        Rayfield:ShowWindow()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Hitbox Expander",
            Text = "Press Right Shift to toggle UI",
            Duration = 5
        })
    end
end)

-- UI toggle binding
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        if Rayfield then
            Rayfield:ToggleWindow()
        end
    end
end)
