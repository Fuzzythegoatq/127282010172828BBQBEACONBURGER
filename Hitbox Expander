-- Load Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Initial notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Universal Hitbox Expander",
    Text = "Made By Corygunzjr (Multi-Hitbox Support)",
    Duration = 5
})

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "Universal Hitbox Expander",
    LoadingTitle = "Loading HBE...",
    LoadingSubtitle = "With Team/Player Selection & Multi-Hitbox",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldHBE",
        FileName = "HBEConfig"
    },
    Discord = { Enabled = false },
    KeySystem = false
})

-- Create tabs
local MainTab = Window:CreateTab("Hitbox Expander", 4483362458)
local FilterTab = Window:CreateTab("Filters", 4483362458)

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local Teams = game:GetService("Teams")
local HttpService = game:GetService("HttpService")

-- Configuration system
local config = {
    size = 5,
    transparency = 0.5,
    enabled = false
}

-- Filter system
local filters = {
    excludedPlayers = {},
    excludedTeams = {},
    forceIncludedPlayers = {},
    hideWhenSitting = false,
    friendFilterEnabled = false
}

-- Friend list
local friendUserIds = {}

local function fetchFriends()
    local success, response = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(
            "https://friends.roblox.com/v1/users/" .. LocalPlayer.UserId .. "/friends"))
    end)

    if success and response and response.data then
        friendUserIds = {}
        for _, friend in ipairs(response.data) do
            friendUserIds[tonumber(friend.id)] = true
        end
    end
end

fetchFriends() -- Call it once on load

-- Hitbox toggle config (default values)
local hitboxToggles = {
    Head = true,
    ["Left Arm"] = false,
    ["Right Arm"] = false,
    ["Left Leg"] = false,
    ["Right Leg"] = false,
    Torso = false,
}

-- Player monitoring
local monitoredPlayers = {}

-- Mapping of hitbox type to body parts
local hitboxPartsMap = {
    Head = {"Head"},
    ["Left Arm"] = {"LeftLowerArm", "LeftUpperArm"},
    ["Right Arm"] = {"RightLowerArm", "RightUpperArm"},
    ["Left Leg"] = {"LeftLowerLeg", "LeftUpperLeg"},
    ["Right Leg"] = {"RightLowerLeg", "RightUpperLeg"},
    Torso = {"Torso", "UpperTorso", "LowerTorso"}
}

-- Get all current teams
local function getTeamList()
    local teamList = {}
    for _, team in ipairs(Teams:GetTeams()) do
        table.insert(teamList, team.Name)
    end
    return teamList
end

-- Get all players (excluding local player)
local function getPlayerList()
    local playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerList, player.Name)
        end
    end
    return playerList
end

-- Check if player should have hitbox
local function shouldShowHitbox(player)
    if filters.forceIncludedPlayers[player.Name] then
        return true
    end
    if filters.excludedPlayers[player.Name] then
        return false
    end
    if player.Team and filters.excludedTeams[player.Team.Name] then
        return false
    end
    if filters.hideWhenSitting then
        local char = player.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Sit then
                return false
            end
        end
    end
    if filters.friendFilterEnabled and friendUserIds[player.UserId] then
        return false
    end
    return true
end

-- Cache default properties so we can reset later
local defaultProperties = {}

local function cacheDefaults(character)
    if not character then return end
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            if not defaultProperties[part.Name] then
                defaultProperties[part.Name] = {
                    Size = part.Size,
                    Transparency = part.Transparency,
                    CanCollide = part.CanCollide,
                    Massless = part.Massless
                }
            end
        end
    end
end

local function resetPart(part)
    if not part then return end
    local def = defaultProperties[part.Name]
    if def then
        part.Size = def.Size
        part.Transparency = def.Transparency
        part.CanCollide = def.CanCollide
        part.Massless = def.Massless
    end
end

local function applyToPart(part, size, transparency)
    if not part then return end
    part.Size = Vector3.new(size, size, size)
    part.Transparency = transparency
    part.CanCollide = false
    part.Massless = true
end

-- Apply hitboxes based on toggles and filters
local function applyHitbox(player)
    if player == LocalPlayer then return end

    if not monitoredPlayers[player] then
        monitoredPlayers[player] = true

        player.CharacterAdded:Connect(function(char)
            char:WaitForChild("Humanoid", 5)
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:GetPropertyChangedSignal("Sit"):Connect(function()
                    applyHitbox(player)
                end)
            end
            task.wait(0.2)
            applyHitbox(player)
        end)

        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:GetPropertyChangedSignal("Sit"):Connect(function()
                    applyHitbox(player)
                end)
            end
            task.delay(0.3, function()
                applyHitbox(player)
            end)
        end
    end

    local char = player.Character
    if not char then return end

    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        for hitboxType, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                resetPart(char:FindFirstChild(partName))
            end
        end
        return
    end

    if not config.enabled or not shouldShowHitbox(player) then
        for hitboxType, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                resetPart(char:FindFirstChild(partName))
            end
        end
        return
    end

    cacheDefaults(char)

    for hitboxType, enabled in pairs(hitboxToggles) do
        local partsList = hitboxPartsMap[hitboxType]
        if enabled and partsList then
            for _, partName in ipairs(partsList) do
                applyToPart(char:FindFirstChild(partName), config.size, config.transparency)
            end
        else
            if partsList then
                for _, partName in ipairs(partsList) do
                    resetPart(char:FindFirstChild(partName))
                end
            end
        end
    end
end

-- Update all hitboxes
local function updateAllHitboxes()
    for player, _ in pairs(monitoredPlayers) do
        applyHitbox(player)
    end
end

-- Main Tab UI Elements
MainTab:CreateToggle({
    Name = "Enable Hitbox Expander",
    CurrentValue = config.enabled,
    Flag = "HitboxToggle",
    Callback = function(Value)
        config.enabled = Value
        updateAllHitboxes()
    end,
})

MainTab:CreateSlider({
    Name = "Hitbox Size",
    Range = {2, 200},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = config.size,
    Flag = "SizeSlider",
    Callback = function(Value)
        config.size = Value
        updateAllHitboxes()
    end,
})

MainTab:CreateSlider({
    Name = "Transparency",
    Range = {0, 1},
    Increment = 0.05,
    Suffix = "",
    CurrentValue = config.transparency,
    Flag = "TransparencySlider",
    Callback = function(Value)
        config.transparency = Value
        updateAllHitboxes()
    end,
})

local hitboxPartsOptions = {}
for partName, _ in pairs(hitboxToggles) do
    table.insert(hitboxPartsOptions, partName)
end

local defaultSelected = {}
for partName, enabled in pairs(hitboxToggles) do
    if enabled then
        table.insert(defaultSelected, partName)
    end
end

MainTab:CreateDropdown({
    Name = "Hitbox Parts",
    Options = hitboxPartsOptions,
    CurrentOption = defaultSelected,
    MultipleOptions = true,
    Flag = "HitboxPartsDropdown",
    Callback = function(selectedParts)
        for partName, _ in pairs(hitboxToggles) do
            hitboxToggles[partName] = false
        end
        for _, partName in ipairs(selectedParts) do
            hitboxToggles[partName] = true
        end
        updateAllHitboxes()
    end,
})

-- Filter Tab UI Elements
local playerDropdown = FilterTab:CreateDropdown({
    Name = "Exclude Players",
    Options = getPlayerList(),
    CurrentOption = "",
    MultipleOptions = true,
    Flag = "PlayerFilterDropdown",
    Callback = function(Selected)
        filters.excludedPlayers = {}
        for _, playerName in ipairs(Selected) do
            filters.excludedPlayers[playerName] = true
        end
        updateAllHitboxes()
    end,
})

local teamDropdown = FilterTab:CreateDropdown({
    Name = "Exclude Teams",
    Options = getTeamList(),
    CurrentOption = "",
    MultipleOptions = true,
    Flag = "TeamFilterDropdown",
    Callback = function(Selected)
        filters.excludedTeams = {}
        for _, teamName in ipairs(Selected) do
            filters.excludedTeams[teamName] = true
        end
        updateAllHitboxes()
    end,
})

local forceIncludeDropdown = FilterTab:CreateDropdown({
    Name = "Force Include Players",
    Options = getPlayerList(),
    CurrentOption = "",
    MultipleOptions = true,
    Flag = "ForceIncludeDropdown",
    Callback = function(Selected)
        filters.forceIncludedPlayers = {}
        for _, playerName in ipairs(Selected) do
            filters.forceIncludedPlayers[playerName] = true
        end
        updateAllHitboxes()
    end,
})

FilterTab:CreateToggle({
    Name = "Hide Hitbox When Player is Sitting",
    CurrentValue = filters.hideWhenSitting,
    Flag = "HideSittingToggle",
    Callback = function(Value)
        filters.hideWhenSitting = Value
        updateAllHitboxes()
    end
})

FilterTab:CreateToggle({
    Name = "Hide Friends' Hitboxes",
    CurrentValue = filters.friendFilterEnabled,
    Flag = "FriendFilterToggle",
    Callback = function(Value)
        filters.friendFilterEnabled = Value
        updateAllHitboxes()
    end
})

-- Dropdown refreshing
Players.PlayerAdded:Connect(function()
    playerDropdown:Refresh(getPlayerList(), true)
    forceIncludeDropdown:Refresh(getPlayerList(), true)
end)

Players.PlayerRemoving:Connect(function()
    playerDropdown:Refresh(getPlayerList(), true)
    forceIncludeDropdown:Refresh(getPlayerList(), true)
end)

Teams.ChildAdded:Connect(function()
    teamDropdown:Refresh(getTeamList(), true)
end)

Teams.ChildRemoved:Connect(function()
    teamDropdown:Refresh(getTeamList(), true)
end)

-- Player monitoring
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        applyHitbox(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        applyHitbox(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if monitoredPlayers[player] then
        local char = player.Character
        if char then
            for hitboxType, partsList in pairs(hitboxPartsMap) do
                for _, partName in ipairs(partsList) do
                    resetPart(char:FindFirstChild(partName))
                end
            end
        end
        monitoredPlayers[player] = nil
    end
end)

RunService.Heartbeat:Connect(function()
    if config.enabled then
        for player, _ in pairs(monitoredPlayers) do
            applyHitbox(player)
        end
    end
end)

task.spawn(function()
    wait(1)
    if Rayfield then
        Rayfield:ShowWindow()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Hitbox Expander",
            Text = "Press Right Shift to toggle UI",
            Duration = 5
        })
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        if Rayfield then
            Rayfield:ToggleWindow()
        end
    end
end)
