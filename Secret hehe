-- Load Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Initial notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Universal Hitbox Expander",
    Text = "Made By Corygunzjr",
    Duration = 5
})

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "Universal Hitbox Expander",
    LoadingTitle = "Loading HBE...",
    LoadingSubtitle = "With Team/Player Selection & Multi-Hitbox",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldHBE",
        FileName = "HBEConfig"
    },
    Discord = { Enabled = false },
    KeySystem = false
})

-- Create tabs
local MainTab = Window:CreateTab("Hitbox Expander", 4483362458)
local FilterTab = Window:CreateTab("Filters", 4483362458)
local ScriptTab = Window:CreateTab("Script", 4483362458)
local EspTab = Window:CreateTab("ESP", 4483362458)  -- Added ESP Tab

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local Teams = game:GetService("Teams")

-- Configuration system
local config = {
    size = 5,
    transparency = 0.5,
    enabled = false,
    npcEnabled = false,
    npcSize = 5,
    npcTransparency = 0.5
}

-- Filter system
local filters = {
    excludedPlayers = {},
    excludedTeams = {},
    forceIncludedPlayers = {},
    hideWhenSitting = false,
    hideFriends = false,
    hideForceField = false
}

-- Hitbox toggle config
local hitboxToggles = {
    Head = true,
    ["Left Arm"] = false,
    ["Right Arm"] = false,
    ["Left Leg"] = false,
    ["Right Leg"] = false,
    Torso = false,
}

-- Player monitoring
local monitoredPlayers = {}
-- NPC monitoring system
local npcTracker = {
    activeNPCs = {},
    connections = {}
}

-- Mapping of hitbox type to body parts
local hitboxPartsMap = {
    Head = {"Head"},
    ["Left Arm"] = {"LeftLowerArm", "LeftUpperArm"},
    ["Right Arm"] = {"RightLowerArm", "RightUpperArm"},
    ["Left Leg"] = {"LeftLowerLeg", "LeftUpperLeg"},
    ["Right Leg"] = {"RightLowerLeg", "RightUpperLeg"},
    Torso = {"Torso", "UpperTorso", "LowerTorso"}
}

-- ESP Configuration
local espConfig = {
    enabled = false,
    nameEnabled = true,
    healthEnabled = true,
    highlightEnabled = true,
    itemEspEnabled = false,
    highlightColor = Color3.fromRGB(255, 0, 0),
    textColor = Color3.fromRGB(255, 255, 255),
    itemColor = Color3.fromRGB(0, 255, 0),
    trackedItems = {"Gun", "Sword", "Ammo", "HealthPack"}
}

-- ESP Data Storage
local espData = {
    players = {},
    items = {}
}

local function getTeamList()
    local teamList = {}
    for _, team in ipairs(Teams:GetTeams()) do
        table.insert(teamList, team.Name)
    end
    return teamList
end

local function getPlayerList()
    local playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerList, player.Name)
        end
    end
    return playerList
end

local function isFriend(player)
    local success, result = pcall(function()
        return LocalPlayer:IsFriendsWith(player.UserId)
    end)
    return success and result
end

local function shouldShowHitbox(player)
    if filters.forceIncludedPlayers[player.Name] then
        return true
    end
    if filters.excludedPlayers[player.Name] then
        return false
    end
    if player.Team and filters.excludedTeams[player.Team.Name] then
        return false
    end
    if filters.hideFriends and isFriend(player) then
        return false
    end
    local char = player.Character
    if char then
        if filters.hideWhenSitting then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Sit then
                return false
            end
        end
        if filters.hideForceField and char:FindFirstChildOfClass("ForceField") then
            return false
        end
    end
    return true
end

local defaultProperties = {}

local function cacheDefaults(character)
    if not character then return end
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            if not defaultProperties[part] then
                defaultProperties[part] = {
                    Size = part.Size,
                    Transparency = part.Transparency,
                    CanCollide = part.CanCollide,
                    Massless = part.Massless
                }
            end
        end
    end
end

local function resetPart(part)
    if not part then return end
    local def = defaultProperties[part]
    if def then
        part.Size = def.Size
        part.Transparency = def.Transparency
        part.CanCollide = def.CanCollide
        part.Massless = def.Massless
    end
end

local function applyToPart(part, size, transparency, isNPC)
    if not part then return end
    local actualSize = isNPC and config.npcSize or size
    local actualTransparency = isNPC and config.npcTransparency or transparency
    part.Size = Vector3.new(actualSize, actualSize, actualSize)
    part.Transparency = actualTransparency
    part.CanCollide = false
    part.Massless = true
end

-- Function to apply hitbox to NPCs
local function applyNPCHitbox(model)
    if not model then return end
    
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        -- Reset parts when dead
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = model:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    if not config.enabled or not config.npcEnabled then
        -- Reset parts if disabled
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = model:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    cacheDefaults(model)

    for hitboxType, enabled in pairs(hitboxToggles) do
        local partsList = hitboxPartsMap[hitboxType]
        if enabled and partsList then
            for _, partName in ipairs(partsList) do
                local part = model:FindFirstChild(partName)
                if part then
                    applyToPart(part, config.size, config.transparency, true)
                end
            end
        else
            if partsList then
                for _, partName in ipairs(partsList) do
                    local part = model:FindFirstChild(partName)
                    if part then
                        resetPart(part)
                    end
                end
            end
        end
    end
end

local function applyHitbox(player)
    if player == LocalPlayer then return end

    if not monitoredPlayers[player] then
        monitoredPlayers[player] = true

        player.CharacterAdded:Connect(function(char)
            char:WaitForChild("Humanoid", 5)
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:GetPropertyChangedSignal("Sit"):Connect(function()
                    applyHitbox(player)
                end)
            end
            char.ChildAdded:Connect(function(child)
                if child:IsA("ForceField") then
                    applyHitbox(player)
                end
            end)
            char.ChildRemoved:Connect(function(child)
                if child:IsA("ForceField") then
                    applyHitbox(player)
                end
            end)
            task.wait(0.2)
            applyHitbox(player)
        end)

        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:GetPropertyChangedSignal("Sit"):Connect(function()
                    applyHitbox(player)
                end)
            end
            player.Character.ChildAdded:Connect(function(child)
                if child:IsA("ForceField") then
                    applyHitbox(player)
                end
            end)
            player.Character.ChildRemoved:Connect(function(child)
                if child:IsA("ForceField") then
                    applyHitbox(player)
                end
            end)
            task.delay(0.3, function()
                applyHitbox(player)
            end)
        end
    end

    local char = player.Character
    if not char then return end

    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = char:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    if not config.enabled or not shouldShowHitbox(player) then
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = char:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    cacheDefaults(char)

    for hitboxType, enabled in pairs(hitboxToggles) do
        local partsList = hitboxPartsMap[hitboxType]
        if enabled and partsList then
            for _, partName in ipairs(partsList) do
                local part = char:FindFirstChild(partName)
                if part then
                    applyToPart(part, config.size, config.transparency, false)
                end
            end
        else
            if partsList then
                for _, partName in ipairs(partsList) do
                    local part = char:FindFirstChild(partName)
                    if part then
                        resetPart(part)
                    end
                end
            end
        end
    end
end

local function updateAllHitboxes()
    for player, _ in pairs(monitoredPlayers) do
        applyHitbox(player)
    end
    for model, _ in pairs(npcTracker.activeNPCs) do
        applyNPCHitbox(model)
    end
end

-- Enhanced NPC Tracking System with Respawn Support
local function setupNPCMonitoring()
    local function isNPC(model)
        return model:IsA("Model") and 
               model:FindFirstChildOfClass("Humanoid") and
               not Players:GetPlayerFromCharacter(model)
    end

    local function trackNPC(model)
        if npcTracker.activeNPCs[model] then return end
        npcTracker.activeNPCs[model] = true
        
        local humanoid = model:FindFirstChildOfClass("Humanoid")
        if humanoid then
            -- Track health changes and death
            local healthConn = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
                applyNPCHitbox(model)
            end)
            
            local diedConn = humanoid.Died:Connect(function()
                -- Immediately remove hitbox on death
                applyNPCHitbox(model)
                
                -- Wait for respawn
                local respawnConn
                respawnConn = model.AncestryChanged:Connect(function(_, parent)
                    if parent == Workspace then
                        -- Model respawned
                        task.wait(0.1)  -- Wait for model to fully load
                        applyNPCHitbox(model)
                        respawnConn:Disconnect()
                    end
                end)
            end)
            
            -- Store connections for cleanup
            npcTracker.connections[model] = {
                healthConn,
                diedConn
            }
        end
        
        -- Handle model removal
        local ancestryConn = model.AncestryChanged:Connect(function(_, parent)
            if not parent then
                if npcTracker.connections[model] then
                    for _, conn in ipairs(npcTracker.connections[model]) do
                        conn:Disconnect()
                    end
                end
                npcTracker.activeNPCs[model] = nil
                npcTracker.connections[model] = nil
            end
        end)
        
        table.insert(npcTracker.connections[model], ancestryConn)
        
        applyNPCHitbox(model)
    end

    -- Monitor existing NPCs
    for _, model in ipairs(Workspace:GetDescendants()) do
        if isNPC(model) then
            trackNPC(model)
        end
    end

    -- Monitor for new NPCs
    Workspace.DescendantAdded:Connect(function(descendant)
        if isNPC(descendant) then
            trackNPC(descendant)
        end
    end)
end

-- MainTab Controls
MainTab:CreateToggle({
    Name = "Enable Hitbox Expander",
    CurrentValue = config.enabled,
    Flag = "HitboxToggle",
    Callback = function(Value)
        config.enabled = Value
        updateAllHitboxes()
    end,
})

MainTab:CreateToggle({
    Name = "Enable NPC Hitboxes",
    CurrentValue = config.npcEnabled,
    Flag = "NPCToggle",
    Callback = function(Value)
        config.npcEnabled = Value
        updateAllHitboxes()
    end,
})

-- Player Hitbox Settings
MainTab:CreateLabel("Player Settings")
MainTab:CreateSlider({
    Name = "Hitbox Size",
    Range = {2, 200},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = config.size,
    Flag = "SizeSlider",
    Callback = function(Value)
        config.size = Value
        updateAllHitboxes()
    end,
})

MainTab:CreateSlider({
    Name = "Transparency",
    Range = {0, 1},
    Increment = 0.05,
    Suffix = "",
    CurrentValue = config.transparency,
    Flag = "TransparencySlider",
    Callback = function(Value)
        config.transparency = Value
        updateAllHitboxes()
    end,
})

-- NPC Hitbox Settings
MainTab:CreateLabel("NPC Settings")
MainTab:CreateSlider({
    Name = "NPC Hitbox Size",
    Range = {2, 200},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = config.npcSize,
    Flag = "NPCSizeSlider",
    Callback = function(Value)
        config.npcSize = Value
        updateAllHitboxes()
    end,
})

MainTab:CreateSlider({
    Name = "NPC Transparency",
    Range = {0, 1},
    Increment = 0.05,
    Suffix = "",
    CurrentValue = config.npcTransparency,
    Flag = "NPCTransparencySlider",
    Callback = function(Value)
        config.npcTransparency = Value
        updateAllHitboxes()
    end,
})

local hitboxPartsOptions = {}
for partName, _ in pairs(hitboxToggles) do
    table.insert(hitboxPartsOptions, partName)
end

local defaultSelected = {}
for partName, enabled in pairs(hitboxToggles) do
    if enabled then
        table.insert(defaultSelected, partName)
    end
end

MainTab:CreateDropdown({
    Name = "Hitbox Parts",
    Options = hitboxPartsOptions,
    CurrentOption = defaultSelected,
    MultipleOptions = true,
    Flag = "HitboxPartsDropdown",
    Callback = function(selectedParts)
        for partName, _ in pairs(hitboxToggles) do
            hitboxToggles[partName] = false
        end
        for _, partName in ipairs(selectedParts) do
            hitboxToggles[partName] = true
        end
        updateAllHitboxes()
    end,
})

-- FilterTab
local playerDropdown = FilterTab:CreateDropdown({
    Name = "Exclude Players",
    Options = getPlayerList(),
    CurrentOption = "",
    MultipleOptions = true,
    Flag = "PlayerFilterDropdown",
    Callback = function(Selected)
        filters.excludedPlayers = {}
        for _, playerName in ipairs(Selected) do
            filters.excludedPlayers[playerName] = true
        end
        updateAllHitboxes()
    end,
})

local teamDropdown = FilterTab:CreateDropdown({
    Name = "Exclude Teams",
    Options = getTeamList(),
    CurrentOption = "",
    MultipleOptions = true,
    Flag = "TeamFilterDropdown",
    Callback = function(Selected)
        filters.excludedTeams = {}
        for _, teamName in ipairs(Selected) do
            filters.excludedTeams[teamName] = true
        end
        updateAllHitboxes()
    end,
})

local forceIncludeDropdown = FilterTab:CreateDropdown({
    Name = "Force Include Players",
    Options = getPlayerList(),
    CurrentOption = "",
    MultipleOptions = true,
    Flag = "ForceIncludeDropdown",
    Callback = function(Selected)
        filters.forceIncludedPlayers = {}
        for _, playerName in ipairs(Selected) do
            filters.forceIncludedPlayers[playerName] = true
        end
        updateAllHitboxes()
    end,
})

FilterTab:CreateToggle({
    Name = "Hide Hitbox When Player is Sitting",
    CurrentValue = filters.hideWhenSitting,
    Flag = "HideSittingToggle",
    Callback = function(Value)
        filters.hideWhenSitting = Value
        updateAllHitboxes()
    end
})

FilterTab:CreateToggle({
    Name = "Hide Hitbox for Friends",
    CurrentValue = filters.hideFriends,
    Flag = "HideFriendsToggle",
    Callback = function(Value)
        filters.hideFriends = Value
        updateAllHitboxes()
    end
})

FilterTab:CreateToggle({
    Name = "Hide Hitbox for Players with ForceField",
    CurrentValue = filters.hideForceField,
    Flag = "HideForceFieldToggle",
    Callback = function(Value)
        filters.hideForceField = Value
        updateAllHitboxes()
    end
})

-- ScriptTab Buttons
ScriptTab:CreateButton({
    Name = "Load Shiftlock Script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/prosadaf/Example/refs/heads/main/Video"))()
    end,
})

ScriptTab:CreateButton({
    Name = "Load Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end,
})

ScriptTab:CreateButton({
    Name = "Load Adonis Bypasser",
    Callback = function()
        loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Adonis-Admin-Anti-Crash-18757"))()
    end,
})

ScriptTab:CreateButton({
    Name = "Load Abcde Bypasser",
    Callback = function()
        game:GetService("RunService").Heartbeat:Connect(function()
            task.wait(0.1)
            local char = game.Players.LocalPlayer.Character
            if char and char:FindFirstChild("abcde") then
                char.abcde:Destroy()
            end
        end)
    end,
})

ScriptTab:CreateButton({
    Name = "Load Instant Proximity",
    Callback = function()
        local ProximityPromptHoldDuration = 0
        local ChangedObjects = {}

        for _, ProximityObject in ipairs(workspace:GetDescendants()) do
            if ProximityObject:IsA("ProximityPrompt") then
                ChangedObjects[ProximityObject] = ProximityObject.HoldDuration
                ProximityObject.HoldDuration = ProximityPromptHoldDuration
            end
        end
    end,
})

-- ESP Functions
local function createHighlight(instance, color)
    if not instance then return nil end
    
    local highlight = Instance.new("Highlight")
    highlight.Adornee = instance
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.FillColor = color
    highlight.FillTransparency = 0.5
    highlight.OutlineColor = color
    highlight.OutlineTransparency = 0
    highlight.Parent = instance
    
    return highlight
end

local function createBillboard(character)
    if not character then return nil end
    
    local head = character:FindFirstChild("Head")
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local primaryPart = character.PrimaryPart
    
    local adornee = head or humanoidRootPart or primaryPart
    if not adornee then return nil end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = adornee
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.Enabled = espConfig.enabled
    billboard.Parent = character
    
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "NameLabel"
    nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
    nameLabel.Position = UDim2.new(0, 0, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextColor3 = espConfig.textColor
    nameLabel.TextSize = 14
    nameLabel.Text = "Player"
    nameLabel.Visible = espConfig.nameEnabled
    nameLabel.Parent = billboard
    
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Name = "HealthLabel"
    healthLabel.Size = UDim2.new(1, 0, 0.5, 0)
    healthLabel.Position = UDim2.new(0, 0, 0.5, 0)
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextColor3 = espConfig.textColor
    healthLabel.TextSize = 12
    healthLabel.Text = "HP: 100/100"
    healthLabel.Visible = espConfig.healthEnabled
    healthLabel.Parent = billboard
    
    return billboard
end

-- Enhanced player monitoring for ESP
local function setupPlayerEsp(player)
    if not player or player == LocalPlayer then return end
    
    -- Create player data if it doesn't exist
    if not espData.players[player] then
        espData.players[player] = {
            highlight = nil,
            billboard = nil,
            connections = {}
        }
    end
    
    local data = espData.players[player]
    
    -- Clean up previous connections
    for _, conn in ipairs(data.connections) do
        conn:Disconnect()
    end
    data.connections = {}
    
    -- Handle character added
    local function characterAdded(char)
        -- Wait for character to fully load
        local humanoid = char:WaitForChild("Humanoid", 5)
        if not humanoid then return end
        
        -- Create components
        if espConfig.enabled and espConfig.highlightEnabled and not data.highlight then
            data.highlight = createHighlight(char, espConfig.highlightColor)
        end
        
        if espConfig.enabled and not data.billboard then
            data.billboard = createBillboard(char)
        end
        
        -- Set initial values
        if data.billboard then
            if data.billboard:FindFirstChild("NameLabel") then
                data.billboard.NameLabel.Text = player.Name
                data.billboard.NameLabel.TextColor3 = espConfig.textColor
                data.billboard.NameLabel.Visible = espConfig.nameEnabled
            end
            
            if data.billboard:FindFirstChild("HealthLabel") then
                data.billboard.HealthLabel.Text = string.format("HP: %d/%d", humanoid.Health, humanoid.MaxHealth)
                data.billboard.HealthLabel.TextColor3 = espConfig.textColor
                data.billboard.HealthLabel.Visible = espConfig.healthEnabled
            end
        end
        
        -- Health tracking
        local healthConn = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            if data.billboard and data.billboard.Parent and data.billboard:FindFirstChild("HealthLabel") then
                data.billboard.HealthLabel.Text = string.format("HP: %d/%d", humanoid.Health, humanoid.MaxHealth)
            end
        end)
        table.insert(data.connections, healthConn)
        
        -- Track character death
        local diedConn = humanoid.Died:Connect(function()
            if data.highlight then
                data.highlight.Enabled = false
            end
            if data.billboard then
                data.billboard.Enabled = false
            end
        end)
        table.insert(data.connections, diedConn)
        
        -- Track character respawn
        local respawnConn
        respawnConn = player.CharacterAdded:Connect(function(newChar)
            diedConn:Disconnect()
            respawnConn:Disconnect()
            task.wait(1)  -- Wait for new character to load
            characterAdded(newChar)
        end)
        table.insert(data.connections, respawnConn)
    end
    
    -- Connect to character events
    if player.Character then
        characterAdded(player.Character)
    end
    
    local charAddedConn = player.CharacterAdded:Connect(characterAdded)
    table.insert(data.connections, charAddedConn)
    
    -- Player leaving
    local playerRemovingConn = player.AncestryChanged:Connect(function(_, parent)
        if not parent then
            if data.highlight then
                data.highlight:Destroy()
            end
            if data.billboard then
                data.billboard:Destroy()
            end
            for _, conn in ipairs(data.connections) do
                conn:Disconnect()
            end
            espData.players[player] = nil
        end
    end)
    table.insert(data.connections, playerRemovingConn)
end

-- Enhanced Item ESP System
local function updateItemEsp()
    -- Clear existing items if ESP is disabled
    if not espConfig.enabled or not espConfig.itemEspEnabled then
        for item, itemData in pairs(espData.items) do
            if itemData.highlight then
                itemData.highlight:Destroy()
            end
        end
        espData.items = {}
        return
    end
    
    -- Create a lookup table for tracked items
    local trackedItems = {}
    for _, itemName in ipairs(espConfig.trackedItems) do
        trackedItems[itemName:lower()] = true
    end
    
    -- Find all potential items in the workspace
    local function processInstance(instance)
        if not instance or not instance:IsDescendantOf(workspace) then return end
        
        local itemName = instance.Name:lower()
        if trackedItems[itemName] then
            -- Skip if we're already tracking this item
            if espData.items[instance] then return end
            
            -- Create highlight for the item
            local highlight = createHighlight(instance, espConfig.itemColor)
            espData.items[instance] = {
                highlight = highlight
            }
        end
        
        -- Recursively process children for container objects
        for _, child in ipairs(instance:GetChildren()) do
            processInstance(child)
        end
    end
    
    -- Start processing from the workspace
    processInstance(workspace)
    
    -- Clean up items that no longer exist
    for item, itemData in pairs(espData.items) do
        if not item:IsDescendantOf(workspace) then
            if itemData.highlight then
                itemData.highlight:Destroy()
            end
            espData.items[item] = nil
        end
    end
end

-- Comprehensive ESP Monitoring System
local function monitorEspComponents()
    -- Monitor player name ESP
    for player, data in pairs(espData.players) do
        if data.billboard and data.billboard:FindFirstChild("NameLabel") then
            data.billboard.NameLabel.Visible = espConfig.nameEnabled
            data.billboard.NameLabel.TextColor3 = espConfig.textColor
        end
    end
    
    -- Monitor player health ESP
    for player, data in pairs(espData.players) do
        if data.billboard and data.billboard:FindFirstChild("HealthLabel") then
            data.billboard.HealthLabel.Visible = espConfig.healthEnabled
            data.billboard.HealthLabel.TextColor3 = espConfig.textColor
        end
    end
    
    -- Monitor player highlights
    for player, data in pairs(espData.players) do
        if data.highlight then
            data.highlight.Enabled = espConfig.highlightEnabled
            data.highlight.FillColor = espConfig.highlightColor
            data.highlight.OutlineColor = espConfig.highlightColor
        end
    end
    
    -- Monitor item ESP
    for item, itemData in pairs(espData.items) do
        if itemData.highlight then
            itemData.highlight.Enabled = espConfig.itemEspEnabled
            itemData.highlight.FillColor = espConfig.itemColor
            itemData.highlight.OutlineColor = espConfig.itemColor
        end
    end
end

-- Update all ESP
local function updateAllEsp()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            setupPlayerEsp(player)
        end
    end
    updateItemEsp()
    monitorEspComponents()
end

-- ESP Tab Controls
EspTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = espConfig.enabled,
    Flag = "EspToggle",
    Callback = function(Value)
        espConfig.enabled = Value
        updateAllEsp()
    end,
})

EspTab:CreateToggle({
    Name = "Show Player Names",
    CurrentValue = espConfig.nameEnabled,
    Flag = "NameEspToggle",
    Callback = function(Value)
        espConfig.nameEnabled = Value
        monitorEspComponents()
    end,
})

EspTab:CreateToggle({
    Name = "Show Health",
    CurrentValue = espConfig.healthEnabled,
    Flag = "HealthEspToggle",
    Callback = function(Value)
        espConfig.healthEnabled = Value
        monitorEspComponents()
    end,
})

EspTab:CreateToggle({
    Name = "Highlight Players",
    CurrentValue = espConfig.highlightEnabled,
    Flag = "HighlightEspToggle",
    Callback = function(Value)
        espConfig.highlightEnabled = Value
        monitorEspComponents()
    end,
})

EspTab:CreateToggle({
    Name = "Item ESP",
    CurrentValue = espConfig.itemEspEnabled,
    Flag = "ItemEspToggle",
    Callback = function(Value)
        espConfig.itemEspEnabled = Value
        updateItemEsp()
        monitorEspComponents()
    end,
})

EspTab:CreateColorPicker({
    Name = "Highlight Color",
    Color = espConfig.highlightColor,
    Flag = "HighlightColorPicker",
    Callback = function(Value)
        espConfig.highlightColor = Value
        monitorEspComponents()
    end
})

EspTab:CreateColorPicker({
    Name = "Text Color",
    Color = espConfig.textColor,
    Flag = "TextColorPicker",
    Callback = function(Value)
        espConfig.textColor = Value
        monitorEspComponents()
    end
})

EspTab:CreateColorPicker({
    Name = "Item Color",
    Color = espConfig.itemColor,
    Flag = "ItemColorPicker",
    Callback = function(Value)
        espConfig.itemColor = Value
        monitorEspComponents()
    end
})

local itemList = {"Gun", "Sword", "Ammo", "HealthPack", "Coin", "Key", "Armor", "Shield"}

EspTab:CreateDropdown({
    Name = "Tracked Items",
    Options = itemList,
    CurrentOption = espConfig.trackedItems,
    MultipleOptions = true,
    Flag = "TrackedItemsDropdown",
    Callback = function(Selected)
        espConfig.trackedItems = Selected
        
        -- Clear existing item ESP
        for item, itemData in pairs(espData.items) do
            if itemData.highlight then
                itemData.highlight:Destroy()
            end
        end
        espData.items = {}
        
        -- Update with new items
        if espConfig.itemEspEnabled then
            updateItemEsp()
        end
    end,
})

EspTab:CreateInput({
    Name = "Add Custom Item",
    PlaceholderText = "Item Name",
    RemoveTextAfterFocusLost = true,
    Callback = function(Text)
        if Text and Text ~= "" then
            -- Check if item already exists
            local exists = false
            for _, name in ipairs(espConfig.trackedItems) do
                if name:lower() == Text:lower() then
                    exists = true
                    break
                end
            end
            
            if not exists then
                table.insert(espConfig.trackedItems, Text)
                if espConfig.itemEspEnabled then
                    updateItemEsp()
                end
                Rayfield:Notify({
                    Title = "Item Added",
                    Content = "Added '" .. Text .. "' to tracked items",
                    Duration = 3,
                    Image = 4483362458
                })
            else
                Rayfield:Notify({
                    Title = "Item Already Exists",
                    Content = "'" .. Text .. "' is already in tracked items",
                    Duration = 3,
                    Image = 4483362458
                })
            end
        end
    end,
})

-- Initialize ESP System
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        setupPlayerEsp(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        setupPlayerEsp(player)
    end
end)

-- Automatically update item ESP when new items are added to the workspace
workspace.DescendantAdded:Connect(function(descendant)
    if espConfig.itemEspEnabled and espConfig.enabled then
        -- Check if this is a tracked item
        local tracked = false
        for _, itemName in ipairs(espConfig.trackedItems) do
            if descendant.Name:lower() == itemName:lower() then
                tracked = true
                break
            end
        end
        
        if tracked then
            -- Wait a moment for the item to fully load
            task.wait(0.1)
            updateItemEsp()
            monitorEspComponents()
        end
    end
end)

-- Events
Players.PlayerAdded:Connect(function()
    playerDropdown:Refresh(getPlayerList(), true)
    forceIncludeDropdown:Refresh(getPlayerList(), true)
end)

Players.PlayerRemoving:Connect(function(player)
    if monitoredPlayers[player] then
        local char = player.Character
        if char then
            for _, partsList in pairs(hitboxPartsMap) do
                for _, partName in ipairs(partsList) do
                    local part = char:FindFirstChild(partName)
                    if part then
                        resetPart(part)
                    end
                end
            end
        end
        monitoredPlayers[player] = nil
    end
    playerDropdown:Refresh(getPlayerList(), true)
    forceIncludeDropdown:Refresh(getPlayerList(), true)
end)

Teams.ChildAdded:Connect(function()
    teamDropdown:Refresh(getTeamList(), true)
end)

Teams.ChildRemoved:Connect(function()
    teamDropdown:Refresh(getTeamList(), true)
end)

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        applyHitbox(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        applyHitbox(player)
    end
end)

-- Initialize NPC monitoring
setupNPCMonitoring()

-- Main update loop
RunService.Heartbeat:Connect(function()
    if config.enabled then
        -- Update players
        for player, _ in pairs(monitoredPlayers) do
            applyHitbox(player)
        end
        
        -- Update NPCs
        if config.npcEnabled then
            for model, _ in pairs(npcTracker.activeNPCs) do
                applyNPCHitbox(model)
            end
        end
    end
    
    -- Monitor all ESP components in real-time
    if espConfig.enabled then
        monitorEspComponents()
    end
end)

task.spawn(function()
    wait(1)
    if Rayfield then
        Rayfield:ShowWindow()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Hitbox Expander",
            Text = "Press Right Shift to toggle UI",
            Duration = 5
        })
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        if Rayfield then
            Rayfield:ToggleWindow()
        end
    end
end)