-- Load Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Initial notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Universal Hitbox Expander",
    Text = "Made By Corygunzjr (Multi-Hitbox Support)",
    Duration = 5
})

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "Universal Hitbox Expander",
    LoadingTitle = "Loading HBE...",
    LoadingSubtitle = "With Team/Player Selection & Multi-Hitbox",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldHBE",
        FileName = "HBEConfig"
    },
    Discord = { Enabled = false },
    KeySystem = false
})

-- Create tabs
local MainTab = Window:CreateTab("Hitbox Expander", 4483362458)
local FilterTab = Window:CreateTab("Filters", 4483362458)
local ScriptTab = Window:CreateTab("Script", 4483362458)

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local Teams = game:GetService("Teams")

-- Configuration system
local config = {
    size = 5,
    transparency = 0.5,
    enabled = false,
    npcEnabled = false,
    npcSize = 5,
    npcTransparency = 0.5
}

-- Filter system
local filters = {
    excludedPlayers = {},
    excludedTeams = {},
    forceIncludedPlayers = {},
    hideWhenSitting = false,
    hideFriends = false,
    hideForceField = false
}

-- Hitbox toggle config
local hitboxToggles = {
    Head = true,
    ["Left Arm"] = false,
    ["Right Arm"] = false,
    ["Left Leg"] = false,
    ["Right Leg"] = false,
    Torso = false,
}

-- Player monitoring
local monitoredPlayers = {}
-- NPC tracking system
local npcTracker = {
    activeNPCs = {},
    connections = {}
}

-- Mapping of hitbox type to body parts
local hitboxPartsMap = {
    Head = {"Head"},
    ["Left Arm"] = {"LeftLowerArm", "LeftUpperArm"},
    ["Right Arm"] = {"RightLowerArm", "RightUpperArm"},
    ["Left Leg"] = {"LeftLowerLeg", "LeftUpperLeg"},
    ["Right Leg"] = {"RightLowerLeg", "RightUpperLeg"},
    Torso = {"Torso", "UpperTorso", "LowerTorso"}
}

-- Default properties cache
local defaultProperties = {}

-- Optimized functions
local function getTeamList()
    local teamList = {}
    for _, team in ipairs(Teams:GetTeams()) do
        table.insert(teamList, team.Name)
    end
    return teamList
end

local function getPlayerList()
    local playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerList, player.Name)
        end
    end
    return playerList
end

local function cacheDefaults(character)
    if not character then return end
    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            if not defaultProperties[part] then
                defaultProperties[part] = {
                    Size = part.Size,
                    Transparency = part.Transparency,
                    CanCollide = part.CanCollide,
                    Massless = part.Massless
                }
            end
        end
    end
end

local function resetPart(part)
    if not part then return end
    local def = defaultProperties[part]
    if def then
        part.Size = def.Size
        part.Transparency = def.Transparency
        part.CanCollide = def.CanCollide
        part.Massless = def.Massless
    end
end

local function applyToPart(part, size, transparency, isNPC)
    if not part then return end
    local actualSize = isNPC and config.npcSize or size
    local actualTransparency = isNPC and config.npcTransparency or transparency
    part.Size = Vector3.new(actualSize, actualSize, actualSize)
    part.Transparency = actualTransparency
    part.CanCollide = false
    part.Massless = true
end

-- Function to apply hitbox to NPCs
local function applyNPCHitbox(model)
    if not model then return end
    
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        -- Reset parts when dead
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = model:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    if not config.enabled or not config.npcEnabled then
        -- Reset parts if disabled
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = model:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    cacheDefaults(model)

    for hitboxType, enabled in pairs(hitboxToggles) do
        if not enabled then continue end
        
        local partsList = hitboxPartsMap[hitboxType]
        if not partsList then continue end
        
        for _, partName in ipairs(partsList) do
            local part = model:FindFirstChild(partName)
            if part then
                applyToPart(part, config.size, config.transparency, true)
            end
        end
    end
end

local function applyHitbox(player)
    if player == LocalPlayer then return end
    if not monitoredPlayers[player] then return end

    local char = player.Character
    if not char then return end

    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = char:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    if not config.enabled or not shouldShowHitbox(player) then
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = char:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    cacheDefaults(char)

    for hitboxType, enabled in pairs(hitboxToggles) do
        if not enabled then continue end
        
        local partsList = hitboxPartsMap[hitboxType]
        if not partsList then continue end
        
        for _, partName in ipairs(partsList) do
            local part = char:FindFirstChild(partName)
            if part then
                applyToPart(part, config.size, config.transparency, false)
            end
        end
    end
end

-- Optimized NPC tracking
local function setupNPCMonitoring()
    local function isNPC(model)
        return model:IsA("Model") and 
               model:FindFirstChildOfClass("Humanoid") and
               not Players:GetPlayerFromCharacter(model)
    end

    local function trackNPC(model)
        if npcTracker.activeNPCs[model] then return end
        npcTracker.activeNPCs[model] = true
        
        local humanoid = model:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end
        
        -- Create connection storage for this NPC
        npcTracker.connections[model] = {}
        
        -- Track health changes
        local healthConn = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            applyNPCHitbox(model)
        end)
        table.insert(npcTracker.connections[model], healthConn)
        
        -- Track death
        local diedConn = humanoid.Died:Connect(function()
            applyNPCHitbox(model)
        end)
        table.insert(npcTracker.connections[model], diedConn)
        
        -- Track removal
        local removalConn = model.AncestryChanged:Connect(function(_, parent)
            if not parent then
                -- Clean up connections
                if npcTracker.connections[model] then
                    for _, conn in ipairs(npcTracker.connections[model]) do
                        conn:Disconnect()
                    end
                end
                npcTracker.activeNPCs[model] = nil
                npcTracker.connections[model] = nil
            end
        end)
        table.insert(npcTracker.connections[model], removalConn)
        
        -- Apply initial hitbox
        applyNPCHitbox(model)
    end

    -- Monitor existing NPCs
    for _, model in ipairs(Workspace:GetDescendants()) do
        if isNPC(model) then
            trackNPC(model)
        end
    end

    -- Monitor for new NPCs
    local descendantAddedConn
    descendantAddedConn = Workspace.DescendantAdded:Connect(function(descendant)
        if isNPC(descendant) then
            trackNPC(descendant)
        end
    end)
    
    -- Store main connection
    npcTracker.mainConn = descendantAddedConn
end

-- Player tracking system
local function setupPlayerTracking()
    local function trackPlayer(player)
        if player == LocalPlayer then return end
        if monitoredPlayers[player] then return end
        
        monitoredPlayers[player] = true
        
        player.CharacterAdded:Connect(function(char)
            task.wait(0.5)  -- Wait for character to load
            applyHitbox(player)
        end)
        
        if player.Character then
            task.spawn(applyHitbox, player)
        end
    end

    -- Track existing players
    for _, player in ipairs(Players:GetPlayers()) do
        trackPlayer(player)
    end

    -- Track new players
    Players.PlayerAdded:Connect(trackPlayer)
    
    -- Track player leaving
    Players.PlayerRemoving:Connect(function(player)
        if monitoredPlayers[player] then
            monitoredPlayers[player] = nil
        end
    end)
end

-- MainTab Controls
MainTab:CreateToggle({
    Name = "Enable Hitbox Expander",
    CurrentValue = config.enabled,
    Flag = "HitboxToggle",
    Callback = function(Value)
        config.enabled = Value
    end,
})

MainTab:CreateToggle({
    Name = "Enable NPC Hitboxes",
    CurrentValue = config.npcEnabled,
    Flag = "NPCToggle",
    Callback = function(Value)
        config.npcEnabled = Value
    end,
})

-- Player Hitbox Settings
MainTab:CreateLabel("Player Settings")
MainTab:CreateSlider({
    Name = "Hitbox Size",
    Range = {2, 200},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = config.size,
    Flag = "SizeSlider",
    Callback = function(Value)
        config.size = Value
    end,
})

MainTab:CreateSlider({
    Name = "Transparency",
    Range = {0, 1},
    Increment = 0.05,
    Suffix = "",
    CurrentValue = config.transparency,
    Flag = "TransparencySlider",
    Callback = function(Value)
        config.transparency = Value
    end,
})

-- NPC Hitbox Settings
MainTab:CreateLabel("NPC Settings")
MainTab:CreateSlider({
    Name = "NPC Hitbox Size",
    Range = {2, 200},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = config.npcSize,
    Flag = "NPCSizeSlider",
    Callback = function(Value)
        config.npcSize = Value
    end,
})

MainTab:CreateSlider({
    Name = "NPC Transparency",
    Range = {0, 1},
    Increment = 0.05,
    Suffix = "",
    CurrentValue = config.npcTransparency,
    Flag = "NPCTransparencySlider",
    Callback = function(Value)
        config.npcTransparency = Value
    end,
})

local hitboxPartsOptions = {}
for partName, _ in pairs(hitboxToggles) do
    table.insert(hitboxPartsOptions, partName)
end

local defaultSelected = {}
for partName, enabled in pairs(hitboxToggles) do
    if enabled then
        table.insert(defaultSelected, partName)
    end
end

MainTab:CreateDropdown({
    Name = "Hitbox Parts",
    Options = hitboxPartsOptions,
    CurrentOption = defaultSelected,
    MultipleOptions = true,
    Flag = "HitboxPartsDropdown",
    Callback = function(selectedParts)
        for partName, _ in pairs(hitboxToggles) do
            hitboxToggles[partName] = false
        end
        for _, partName in ipairs(selectedParts) do
            hitboxToggles[partName] = true
        end
    end,
})

-- FilterTab
local playerDropdown = FilterTab:CreateDropdown({
    Name = "Exclude Players",
    Options = getPlayerList(),
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "PlayerFilterDropdown",
    Callback = function(Selected)
        filters.excludedPlayers = {}
        for _, playerName in ipairs(Selected) do
            filters.excludedPlayers[playerName] = true
        end
    end,
})

local teamDropdown = FilterTab:CreateDropdown({
    Name = "Exclude Teams",
    Options = getTeamList(),
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "TeamFilterDropdown",
    Callback = function(Selected)
        filters.excludedTeams = {}
        for _, teamName in ipairs(Selected) do
            filters.excludedTeams[teamName] = true
        end
    end,
})

local forceIncludeDropdown = FilterTab:CreateDropdown({
    Name = "Force Include Players",
    Options = getPlayerList(),
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "ForceIncludeDropdown",
    Callback = function(Selected)
        filters.forceIncludedPlayers = {}
        for _, playerName in ipairs(Selected) do
            filters.forceIncludedPlayers[playerName] = true
        end
    end,
})

FilterTab:CreateToggle({
    Name = "Hide Hitbox When Player is Sitting",
    CurrentValue = filters.hideWhenSitting,
    Flag = "HideSittingToggle",
    Callback = function(Value)
        filters.hideWhenSitting = Value
    end
})

FilterTab:CreateToggle({
    Name = "Hide Hitbox for Friends",
    CurrentValue = filters.hideFriends,
    Flag = "HideFriendsToggle",
    Callback = function(Value)
        filters.hideFriends = Value
    end
})

FilterTab:CreateToggle({
    Name = "Hide Hitbox for Players with ForceField",
    CurrentValue = filters.hideForceField,
    Flag = "HideForceFieldToggle",
    Callback = function(Value)
        filters.hideForceField = Value
    end
})

-- ScriptTab Buttons
ScriptTab:CreateButton({
    Name = "Load Shiftlock Script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/prosadaf/Example/refs/heads/main/Video"))()
    end,
})

ScriptTab:CreateButton({
    Name = "Load Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end,
})

ScriptTab:CreateButton({
    Name = "Load Adonis Bypasser",
    Callback = function()
        loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Adonis-Admin-Anti-Crash-18757"))()
    end,
})

ScriptTab:CreateButton({
    Name = "Load Abcde Bypasser",
    Callback = function()
        game:GetService("RunService").Heartbeat:Connect(function()
            task.wait(0.1)
            local char = game.Players.LocalPlayer.Character
            if char and char:FindFirstChild("abcde") then
                char.abcde:Destroy()
            end
        end)
    end,
})

ScriptTab:CreateButton({
    Name = "Load Instant Proximity",
    Callback = function()
        for _, v in ipairs(workspace:GetDescendants()) do
            if v:IsA("ProximityPrompt") then
                v.HoldDuration = 0
            end
        end
    end,
})

-- Cleanup function
local function cleanup()
    if npcTracker.mainConn then
        npcTracker.mainConn:Disconnect()
    end
    
    for model, conns in pairs(npcTracker.connections) do
        for _, conn in ipairs(conns) do
            conn:Disconnect()
        end
    end
    
    npcTracker.activeNPCs = {}
    npcTracker.connections = {}
end

-- Initialize systems
setupPlayerTracking()
setupNPCMonitoring()

-- Main update loop
RunService.Heartbeat:Connect(function()
    if not config.enabled then return end
    
    -- Update players
    for player, _ in pairs(monitoredPlayers) do
        applyHitbox(player)
    end
    
    -- Update NPCs
    if config.npcEnabled then
        for model, _ in pairs(npcTracker.activeNPCs) do
            applyNPCHitbox(model)
        end
    end
end)

-- UI toggle notification
task.spawn(function()
    task.wait(1)
    if Rayfield then
        Rayfield:ShowWindow()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Hitbox Expander",
            Text = "Press Right Shift to toggle UI",
            Duration = 5
        })
    end
end)

-- UI toggle keybind
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        if Rayfield then
            Rayfield:ToggleWindow()
        end
    end
end)
-- Load Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Initial notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Universal Hitbox Expander",
    Text = "Made By Corygunzjr (Multi-Hitbox Support)",
    Duration = 5
})

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "Universal Hitbox Expander",
    LoadingTitle = "Loading HBE...",
    LoadingSubtitle = "With Team/Player Selection & Multi-Hitbox",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldHBE",
        FileName = "HBEConfig"
    },
    Discord = { Enabled = false },
    KeySystem = false
})

-- Create tabs
local MainTab = Window:CreateTab("Hitbox Expander", 4483362458)
local FilterTab = Window:CreateTab("Filters", 4483362458)
local ScriptTab = Window:CreateTab("Script", 4483362458)

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local Teams = game:GetService("Teams")

-- Configuration system
local config = {
    size = 5,
    transparency = 0.5,
    enabled = false,
    npcEnabled = false,
    npcSize = 5,
    npcTransparency = 0.5
}

-- Filter system
local filters = {
    excludedPlayers = {},
    excludedTeams = {},
    forceIncludedPlayers = {},
    hideWhenSitting = false,
    hideFriends = false,
    hideForceField = false
}

-- Hitbox toggle config
local hitboxToggles = {
    Head = true,
    ["Left Arm"] = false,
    ["Right Arm"] = false,
    ["Left Leg"] = false,
    ["Right Leg"] = false,
    Torso = false,
}

-- Player monitoring
local monitoredPlayers = {}
-- NPC tracking system
local npcTracker = {
    activeNPCs = {},
    connections = {}
}

-- Mapping of hitbox type to body parts
local hitboxPartsMap = {
    Head = {"Head"},
    ["Left Arm"] = {"LeftLowerArm", "LeftUpperArm"},
    ["Right Arm"] = {"RightLowerArm", "RightUpperArm"},
    ["Left Leg"] = {"LeftLowerLeg", "LeftUpperLeg"},
    ["Right Leg"] = {"RightLowerLeg", "RightUpperLeg"},
    Torso = {"Torso", "UpperTorso", "LowerTorso"}
}

-- Default properties cache
local defaultProperties = {}

-- Optimized functions
local function getTeamList()
    local teamList = {}
    for _, team in ipairs(Teams:GetTeams()) do
        table.insert(teamList, team.Name)
    end
    return teamList
end

local function getPlayerList()
    local playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerList, player.Name)
        end
    end
    return playerList
end

local function cacheDefaults(character)
    if not character then return end
    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            if not defaultProperties[part] then
                defaultProperties[part] = {
                    Size = part.Size,
                    Transparency = part.Transparency,
                    CanCollide = part.CanCollide,
                    Massless = part.Massless
                }
            end
        end
    end
end

local function resetPart(part)
    if not part then return end
    local def = defaultProperties[part]
    if def then
        part.Size = def.Size
        part.Transparency = def.Transparency
        part.CanCollide = def.CanCollide
        part.Massless = def.Massless
    end
end

local function applyToPart(part, size, transparency, isNPC)
    if not part then return end
    local actualSize = isNPC and config.npcSize or size
    local actualTransparency = isNPC and config.npcTransparency or transparency
    part.Size = Vector3.new(actualSize, actualSize, actualSize)
    part.Transparency = actualTransparency
    part.CanCollide = false
    part.Massless = true
end

-- Function to apply hitbox to NPCs
local function applyNPCHitbox(model)
    if not model then return end
    
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        -- Reset parts when dead
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = model:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    if not config.enabled or not config.npcEnabled then
        -- Reset parts if disabled
        for _, partsList in pairs(hitboxPartsMap) do
            for _, partName in ipairs(partsList) do
                local part = model:FindFirstChild(partName)
                if part then
                    resetPart(part)
                end
            end
        end
        return
    end

    cacheDefaults(model)

    for hitboxType, enabled in pairs(hitboxToggles) do
        if not enabled then continue end
        
        local partsList = hitboxPartsMap[hitboxType]
        if not par
-- Cleanup on script reload
game:BindToClose(function()
    cleanup()
end)
